@page "/deckview"
@using DeckBuilderWASM.POCOs
@using System.Text.Json;
@using System.IO
@using System.Reflection.Metadata
@using System.Text.RegularExpressions
@inject IJSRuntime JS
@inject HttpClient Http
@inject Container container

<div class="container">
    @if (problems.Count > 0)
    {
        <div class="row">
            <div class="h6">Folgende Karten wurden nicht gefunden:</div>
        </div>
    }

    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Export läuft</h5>
                    @* <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button> *@
                </div>
                <div class="modal-body">
                    @aktuellerStand
                </div>
                <div class="modal-footer">
                    Bitte ein wenig Geduld, das dauert ein wenig.
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </div>
        </div>
    </div>

    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

    <div class="row">
        @foreach (var card in this.cards)
        {
            <div class="col-md-3 mb-3">
                <DeckBuilderWASM.Components.CardSelection Card="@card" />
            </div>
        }
    </div>
    <div class="row">
        <div class="col-md 2 mb-2">
            <button class="btn btn-secondary btn-sm" @onclick="() => SaveContainer()">Speichern</button>
        </div>
        <div class="col-md 2 mb-2">
            <button class="btn btn-secondary btn-sm" data-toggle="modal" data-target="#altArtModal" @onclick="() => ExportPictures()">Export</button>
        </div>
    </div>
</div>


@code {

    #region modal
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    #endregion

    List<Card> cards = new();
    List<string> problems = new();
    string aktuellerStand;

    protected override async Task OnInitializedAsync()
    {
        var split = container.Input.Split(['\n']).Select(GetCorrectedInput);
        foreach (var card in split)
        {
            if (String.IsNullOrEmpty(card))
                continue;
            
            var regex = new Regex(@"^\d+");

            var match = regex.Match(card);

            if (!match.Success){
                problems.Add(card);
                continue;
            }

            if (!Int32.TryParse(card.Trim().Substring(0, match.Value.Length), out var anzahl))
            {
                problems.Add(card);
                continue;
            }
            var name = GetCorrectedInput(card.Substring(match.Value.Length));
            var result = await Http.GetFromJsonAsync<ApiCardResult>($"https://api.scryfall.com/cards/named?exact={name}");
            if (result != null)
                cards.Add(new Card(result, name, anzahl));
            else
                problems.Add(card);
            await Task.Delay(100);
            if (cards.Count % 4 == 0)
                StateHasChanged();
        }
        container.Data = cards;
        StateHasChanged();
        this.LoadAllImages();
    }

    private async Task LoadAllImages()
    {
        foreach (var card in this.cards.Where(c => c.Image == null || c.Image.Length == 0))
            await this.LoadImage(card);
    }

    private async Task LoadImage(Card card)
    {
        card.Image = await Http.GetByteArrayAsync($"https://api.scryfall.com/cards/named?exact={card.Name}&format=image&set={card.SelectedVersion.Set}");
        await Task.Delay(100);
    }

    private async Task ExportPictures()
    {
        this.Open();
        this.aktuellerStand = "Lade Bilder";
        await this.LoadAllImages();

        var imagesToExport = new List<byte[]>();

        for (int k = 0; k < this.cards.Count; k++)
        {
            var card = this.cards[k];
            for (int i = 0; i < card.Anzahl; i++)
                imagesToExport.Add(card.Image);
        }

        var tasks = new List<Task>();
        var imageChunks = imagesToExport.Chunk(2).ToList();

        for (int i = 0; i < imageChunks.Count; i++)
        {            
            this.aktuellerStand = $"Starte Bildverarbeitung von Bild {i+1}";
            this.StateHasChanged();
            await CombineImages(imageChunks[i], i, imageChunks.Count).ConfigureAwait(false);
        }

        this.Close();
    }

    private async Task CombineImages(byte[][] images, int currentNumber, int maxNumber)
    {
        byte[] finalImage;
        var current = currentNumber.ToString().PadLeft(maxNumber.ToString().Length);
        var filename = $"{this.container.DeckName}_{current}-{maxNumber}.jpg";
        using (var resultStream = await ImageProcessor.ProcessImagesWithImageSharp(images[0], images.Length > 1 ? images[1] : null))
        {
            finalImage = resultStream.ToArray();
        }
        if (finalImage != null)
            await this.SaveFile(finalImage, filename);
    }

    private async Task SaveContainer()
    {
        var fileName = String.IsNullOrEmpty(this.container.DeckName) ? "deck.json" : $"{this.container.DeckName}.json";
        var byteArray = JsonSerializer.SerializeToUtf8Bytes(container);
        var blob = await JS.InvokeAsync<IJSObjectReference>("createBlob", byteArray);
        // Erstellen Sie einen Download-Link
        var url = await JS.InvokeAsync<string>("URL.createObjectURL", blob);

        // Erzeugen Sie den Download-Link
        await JS.InvokeVoidAsync("downloadFile", url, fileName);

        // Optional: Bereinigen Sie den Blob-URL, wenn er nicht mehr benötigt wird
        await JS.InvokeVoidAsync("URL.revokeObjectURL", url);
    }

    private async Task SaveFile(byte[] byteArray, string filename)
    {
        var blob = await JS.InvokeAsync<IJSObjectReference>("createBlob", byteArray);
        // Erstellen Sie einen Download-Link
        var url = await JS.InvokeAsync<string>("URL.createObjectURL", blob);

        // Erzeugen Sie den Download-Link
        await JS.InvokeVoidAsync("downloadFile", url, filename);

        // Optional: Bereinigen Sie den Blob-URL, wenn er nicht mehr benötigt wird
        await JS.InvokeVoidAsync("URL.revokeObjectURL", url);
    }

    private static string GetCorrectedInput(string input)
    {
        return input.Replace("'", String.Empty).Replace(",", String.Empty).Trim();
    }
}
