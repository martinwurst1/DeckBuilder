@using DeckBuilderWASM.POCOs
@inject HttpClient Http;

<button type="button" style="border: none;background: none" @onclick="async () => await LoadAlternativeArts()" data-toggle="modal" data-target="#altArtModal">
    <img src="@Card.SelectedVersion.ImageUris.Normal" class="img-fluid rounded" alt="Image">
</button>

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Alternative Prints</h5>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
            <div class="modal-body">
                @if (this.Card.ArtSearchResult != null && this.Card.ArtSearchResult.Count > 0)
                {
                    @foreach (var altArt in this.Card.ArtSearchResult.Where(r => r.ImageUris != null))
                    {
                        <div class="row">
                            <div class="col-md-6 mb-6">
                                <button type="button" style="border: none;background: none" @onclick="() => SetSelectedArt(altArt)" data-toggle="modal">
                                    <img src="@altArt.ImageUris.Normal" class="img-fluid rounded" alt="Image">
                                </button>
                            </div>
                        </div>
                    }
                }
                else {
                    <div>Keine anderen Prints gefunden.</div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {


    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}

@code {

    [Parameter]
    public Card Card { get; set; }

    public async Task LoadAlternativeArts()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<ApiSearchResult>($"https://api.scryfall.com/cards/search?q={Card.Name}+unique:art");
            if (result != null)
                this.Card.ArtSearchResult = result.ApiCards;
            Open();
            StateHasChanged();
        }
        catch (Exception e)
        {

            throw;
        }
    }

    public void SetSelectedArt(ApiCardResult result)
    {
        this.Card.SelectedVersion = result;
        this.Card.Image = null;
        this.Close();
    }
}
